import pandas as pd
import configparser
from matplotlib import pyplot as plt
import numpy as np


def load_configuration():
    config = configparser.ConfigParser()
    config.read_file(open('../conf/experiment_configuration.cfg'))
    return config


def generate_sbs_vbs_change_table():
    color1 = '#264653'
    color2 = '#2a9d8f'
    color3 = '#e76f51'
    color4 = '#e9c46a'
    color5 = '#251314'

    fig = plt.figure(1, figsize=(10, 4))

    ax = fig.add_subplot(111)

    width = 0.4
    # the width of the bars
    ind = np.arange(1, 41)

    d = [0.6569114761607912, 0.7744458826107642, 0.5795863960976473, 0.5612516745919083, 0.5421188187767509, 0.5238206648053928, 0.46550271441986685, 0.4755637057559619, 0.47066961982309324, 0.46995948996252196, 0.46133343426010104, 0.4532592265176429, 0.44401170863998235, 0.4445582711602319, 0.4372889620171638, 0.43584888678396905, 0.4413087602467887, 0.44142828678952317, 0.4319212337514101, 0.4337472768831872, 0.4430332833624835, 0.44585056647034355, 0.4469158510160293, 0.4416736458425698, 0.43497603409225977, 0.43368420502959404, 0.4386673308913461, 0.4391638075064573, 0.4366207531588448, 0.4345337598385284, 0.43325295861221047, 0.43563490046317016, 0.43281525874626153, 0.4394910729815453, 0.4354843725715036, 0.43547090732257515, 0.4341636743031658, 0.43926925307064646, 0.4415932088248558, 0.43744382259771625, 0.4373216461149382, 0.44631382460069147, 0.4432514563381926, 0.4413796971856344, 0.43750506062015404, 0.4296927068849009, 0.43243200407417276, 0.4380564045044923, 0.4466306502835937, 0.43882090571971794, 0.44894950085817215, 0.45094321857530406, 0.4515355763865729, 0.45138172198542964, 0.4405974524885727, 0.44287571148611604, 0.45591938561640305, 0.4478559415133562, 0.4548728155179779, 0.4479493051429249, 0.44724301401927896, 0.4549598688641438, 0.4609040006785914, 0.4615515293676227, 0.46376361347317474, 0.4563567245496578, 0.45644766867237496, 0.46166404302873537, 0.458399425232197, 0.46248560789663107, 0.46049643031414467, 0.45601320879351714, 0.4586192106268661, 0.45584569978816636, 0.4495006350124183, 0.4493188369766016, 0.44644942748419386, 0.452390199736092, 0.4467325807186523, 0.4562828954377975, 0.4500168914314824, 0.4506611108969949, 0.4508312189424369, 0.44815904727149464, 0.4521103671219459, 0.4581574889498952, 0.4592684487053561, 0.45378035669925576, 0.4576062063596665, 0.45639910450330234, 0.45304611640032744, 0.4522662015138911, 0.45503223774824936, 0.46155496377258953, 0.45904573376229013, 0.4566226039155013, 0.4590015678157204, 0.4607155305718923, 0.45934103153830097, 0.4601518086620589, 0.4623095667883046, 0.4599993174278452, 0.45878174079820216, 0.4616099814183924, 0.45718766142895145, 0.45754152258019454, 0.45874805685514947, 0.4567178179591245, 0.4556486290644716, 0.4567248991599836, 0.4566102761698725, 0.45874826785795364, 0.4557117918003452, 0.463848393086204, 0.46211163106569314, 0.4664996519761051, 0.46270487131655813, 0.4637518509551472, 0.45924565259243094, 0.461440650194924, 0.46692002059730875, 0.46087228853240575, 0.45613000846234897, 0.45985597278626333, 0.46159504508206667, 0.45853873882687957, 0.4574453431904245, 0.4568075711661794, 0.4594706268789255, 0.46262313673426964, 0.4580846217490294, 0.45403738187849974, 0.45515582407562216, 0.45743211061812133, 0.45740815511774496, 0.4554284852730267, 0.4540074214879217, 0.4562855720092273, 0.45912709945803976, 0.4585525924935627, 0.45641522398530143, 0.4565002287779659, 0.4660420471036351, 0.4613001903044008, 0.45184221289638854, 0.4564136707742716, 0.45441218538353606, 0.4548556510967011, 0.45956862876606447, 0.4607021157039327, 0.4611798242202336, 0.45876450168532806, 0.4573823657194236, 0.45434878968190845, 0.4538693655144209, 0.4486419467499846, 0.4515670421623694, 0.4553580783391533, 0.45464234450411695, 0.45181470076826474, 0.45196223495656035, 0.45355644890573643, 0.4517258701783567, 0.44902101337615397, 0.45140246152322544, 0.4523403783272053, 0.45018210735408537, 0.4504269845492374, 0.4536232204285293, 0.45178913810632315, 0.45490439515196335, 0.4533957618143478, 0.44891754754379914, 0.45096032953617915, 0.45014092033357483, 0.4532330065593207, 0.4545381558216689, 0.4529473665574973, 0.4537712937905457, 0.4550496788154703, 0.4494327444489358, 0.4575503944519908, 0.4540595588649542, 0.4559566274405433, 0.45295528751168573, 0.4539689899341702, 0.45458602074813875, 0.45189168341451824, 0.45067465236368104, 0.45125659024799003, 0.4533158744752503, 0.45535606418835906, 0.4567500228635702, 0.4565701510288748, 0.4576975787500785, 0.4529582549938357, 0.45512601462415936, 0.4536771190296225, 0.4529358716121582, 0.4553492406907989]
    ax.plot(range(1, len(ind) + 1), d[:len(ind)], label="SAMME with MultiClassSelector")

    d = [0.46730681326888057, 0.46730681326888057, 0.47872745595852917, 0.47358405788765057, 0.4823709812662033, 0.47298900134276234, 0.4623621007907447, 0.4695375062957341, 0.47693024228508, 0.4716809469120416, 0.4813016640198552, 0.4798610595668163, 0.481950585562477, 0.4833111834402534, 0.4926482948038894, 0.48632459144295737, 0.49053118770838194, 0.492816581589361, 0.4993335480860249, 0.4951772986995794, 0.4949695567841609, 0.4931665135965216, 0.4866680551711279, 0.48907077836507173, 0.48997535128208936, 0.4905956729138424, 0.4925932292433173, 0.4922400075060572, 0.4907637823466526, 0.4894409094541864, 0.4919314970115059, 0.49119666812070395, 0.4923972569675436, 0.4887464972390066, 0.4909750183736294, 0.48947003065382455, 0.49559606898550607, 0.4989639315729565, 0.49568577880714737, 0.49750856758840417, 0.4951793371623782, 0.4960023394744979, 0.4958583270181708, 0.4940484792426656, 0.4992022125142235, 0.4958232214500989, 0.4921459262272985, 0.4933656836373054, 0.4932212868016756, 0.49263784842007136, 0.49152235130398847, 0.49089713820853054, 0.4938423113615255, 0.4981469315550414, 0.5001306153471051, 0.49781960934430197, 0.5017645974405797, 0.494179934322983, 0.5032824179771604, 0.49797715462607745, 0.49710458907584376, 0.4976132993005742, 0.49823333874290215, 0.4959844709093849, 0.49631863123540604, 0.4976205774766099, 0.502198456983726, 0.5018617147135204, 0.5023906425661575, 0.5032314775649718, 0.5009640218846114, 0.5025010951574801, 0.5025753214342903, 0.503510526880899, 0.5032353408383012, 0.5049624122025475, 0.5049777273542677, 0.5041377709813533, 0.5036998912570618, 0.5045228684240575, 0.5026391268170768, 0.5042910356059953, 0.503430419890306, 0.5034086907458957, 0.5019190219676447, 0.5050666722345583, 0.5026568098653463, 0.5006553838032808, 0.5002494610861165, 0.5012920565769836, 0.5017796518259553, 0.5017760002463167, 0.5024346267956545, 0.5034171729839682, 0.5031100627698922, 0.5022747939597109, 0.5022061372339546, 0.5048882966643242, 0.5045749821074635, 0.502431804552404, 0.5050715778522903, 0.5042311662607877, 0.5043636582521673, 0.49821787681908725, 0.5024728794349678, 0.502593743938625, 0.5026372350432998, 0.49977262590205057, 0.4998721691426485, 0.49951517036170456, 0.5020818727431794, 0.5059738151501045, 0.5077874382193452, 0.5020642475063977, 0.5065039639221653, 0.5049004073028545, 0.5053353133218136, 0.5049817843691927, 0.5036404744091075, 0.5057510730203174, 0.5043243243791954, 0.5038231068650437, 0.5030039023266978, 0.5055894104136948, 0.5066834227317497, 0.5066131962614321, 0.5064557998800022, 0.5071880156809756, 0.5060289235657874, 0.5058468825180201, 0.5050717584276013, 0.5045713893467337, 0.5062775856443994, 0.5084553880769437, 0.505764673260246, 0.5059882736864443, 0.5051196578684324, 0.5062453279548612, 0.5051713426439599, 0.5049016990690307, 0.5013734767059675, 0.5026267304747875, 0.5035346739077767, 0.5032645975921703, 0.5032407104326121, 0.5037618836920129, 0.5041748516887965, 0.5033545846604162, 0.5033092381738391, 0.5016504163607969, 0.5023265024613078, 0.5017777434163244, 0.5009130044245225, 0.5010411432209476, 0.5014241365937608, 0.5028287633366672, 0.5020458604238726, 0.5033689701700577, 0.5029546089973793, 0.5032685930400103, 0.5038369535218177, 0.5030347770552345, 0.5039455967832809, 0.5022821559472377, 0.5028570230051906, 0.5027092375552832, 0.5015901330033068, 0.5031078951277999, 0.5024697947535542, 0.503405884548368, 0.502240874369532, 0.5028344059886783, 0.5041491112169284, 0.503439079317007, 0.5036784355693104, 0.503298978959357, 0.5020672947429433, 0.5035557882194046, 0.503887682957762, 0.5022736352368704, 0.5044663719292325, 0.5059512853346582, 0.5040903862013871, 0.5049403934017078, 0.5044450086973294, 0.5024969680595661, 0.5013961816577035, 0.5023550160179048, 0.5023899784402557, 0.501491063228308, 0.5021933886624732, 0.502612877526239, 0.5031492681013519, 0.5067357738241962, 0.502605337510458, 0.5032573392336037, 0.5034007403884402, 0.5033671779098317, 0.5076194261738876, 0.5081631060863928]
    ax.plot(range(1, len(ind) + 1), d[:len(ind)], label="SAMME with SUNNY")

    d = [0.4932149121538459, 0.4816223702406664, 0.5499173423086506, 0.49992194121643646, 0.4882848395467732, 0.4460330365700976, 0.44526766554186337, 0.41677192560234627, 0.3930990222013048, 0.4037606689409183, 0.40552034306251544, 0.40282396351887095, 0.4173560099639815, 0.41139105044985363, 0.39309432817563883, 0.4257048040511498, 0.4012037324351031, 0.38702303157089063, 0.3995388584403188, 0.39913399679890205, 0.4034769733784928, 0.39767909963049164, 0.4007856960827817, 0.41388558211371623, 0.41597028254374335, 0.4201222573341503, 0.41627558389849006, 0.4147707555621117, 0.4101990419880717, 0.3984960255373386, 0.4021298105636613, 0.4002525685352988, 0.40253786509105977, 0.4076543258549022, 0.40436169317291554, 0.4071208211818652, 0.3998017365035149, 0.3965978796217966, 0.39221397760267773, 0.3955381954847779]
    ax.plot(range(1, len(ind) + 1), d[:len(ind)], label="SAMME with PerAlgorithmRegressor")

    print(d[17])

    ax.set_xticks(ind)
    ax.set_xticklabels(ind)

    plt.xlabel('Iterations')
    plt.ylabel('nPAR10')

    plt.grid(b=True, which='major', linestyle='-', axis='y', zorder=0)

    # 100 linearly spaced numbers
    #x = np.linspace(0, 14, 15)

    # approximation plot for PerAlgorithmRegressor
    #y = 0.0007905*(x** 2) + (-0.01650208)*x + 0.47456491
    #ax.plot(x, y, 'r', color= color1, linewidth=2, label="PerAlgorithmRegressor approximation")

    # approximation plot for SUNNY
    #y = 0.0009834 * (x ** 2) + (-0.018609) * x + 0.46738839
    #ax.plot(x, y, 'r', color= color2, linewidth=2, label="SUNNY approximation")

    #ax.set_ylim(bottom=0.3)
    #ax.set_ylim(top=0.7)

    plt.legend()

    plt.show()

    fig.savefig("plotted/samme_comparison.pdf", bbox_inches='tight')


def get_dataframe_for_sql_query(sql_query: str):
    db_credentials = get_database_credential_string()
    return pd.read_sql(sql_query, con=db_credentials)


def get_database_credential_string():
    config = load_configuration()
    db_config_section = config['DATABASE']
    db_host = db_config_section['host']
    db_username = db_config_section['username']
    db_password = db_config_section['password']
    db_database = db_config_section['database']
    return "mysql://" + db_username + ":" + db_password + "@" + db_host + "/" + db_database


config = load_configuration()
generate_sbs_vbs_change_table()