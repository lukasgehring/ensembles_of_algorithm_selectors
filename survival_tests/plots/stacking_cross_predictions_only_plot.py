import pandas as pd
import configparser
from matplotlib import pyplot as plt
import matplotlib.patches as mpatches

def load_configuration():
    config = configparser.ConfigParser()
    config.read_file(open('../conf/experiment_configuration.cfg'))
    return config


def generate_sbs_vbs_change_table():
    color1 = '#264653'
    color2 = '#2a9d8f'
    color3 = '#e76f51'
    color4 = '#e9c46a'
    color5 = '#251314'

    #TODO: correct version for voting normal??
    stacking_per_algorithm_regressor = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_pred_only.approach, vbs_sbs.metric, stacking_pred_only.result, ((stacking_pred_only.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_pred_only ON vbs_sbs.scenario_name = stacking_pred_only.scenario_name AND vbs_sbs.fold = stacking_pred_only.fold AND vbs_sbs.metric = stacking_pred_only.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7per_algorithm_regressor_predictions_only_full' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_sunny = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_pred_only.approach, vbs_sbs.metric, stacking_pred_only.result, ((stacking_pred_only.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_pred_only ON vbs_sbs.scenario_name = stacking_pred_only.scenario_name AND vbs_sbs.fold = stacking_pred_only.fold AND vbs_sbs.metric = stacking_pred_only.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7SUNNY_predictions_only_full' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_isac = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_pred_only.approach, vbs_sbs.metric, stacking_pred_only.result, ((stacking_pred_only.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_pred_only ON vbs_sbs.scenario_name = stacking_pred_only.scenario_name AND vbs_sbs.fold = stacking_pred_only.fold AND vbs_sbs.metric = stacking_pred_only.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7ISAC_predictions_only_full' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_satzilla = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_pred_only.approach, vbs_sbs.metric, stacking_pred_only.result, ((stacking_pred_only.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_pred_only ON vbs_sbs.scenario_name = stacking_pred_only.scenario_name AND vbs_sbs.fold = stacking_pred_only.fold AND vbs_sbs.metric = stacking_pred_only.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7SATzilla-11_predictions_only_full' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_expectation = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_pred_only.approach, vbs_sbs.metric, stacking_pred_only.result, ((stacking_pred_only.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_pred_only ON vbs_sbs.scenario_name = stacking_pred_only.scenario_name AND vbs_sbs.fold = stacking_pred_only.fold AND vbs_sbs.metric = stacking_pred_only.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7Expectation_predictions_only_full' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_par10 = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_pred_only.approach, vbs_sbs.metric, stacking_pred_only.result, ((stacking_pred_only.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_pred_only ON vbs_sbs.scenario_name = stacking_pred_only.scenario_name AND vbs_sbs.fold = stacking_pred_only.fold AND vbs_sbs.metric = stacking_pred_only.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7PAR10_predictions_only_full' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_multiclass = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_pred_only.approach, vbs_sbs.metric, stacking_pred_only.result, ((stacking_pred_only.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_pred_only ON vbs_sbs.scenario_name = stacking_pred_only.scenario_name AND vbs_sbs.fold = stacking_pred_only.fold AND vbs_sbs.metric = stacking_pred_only.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7multiclass_predictions_only_full' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_random_forest = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_pred_only.approach, vbs_sbs.metric, stacking_pred_only.result, ((stacking_pred_only.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_pred_only ON vbs_sbs.scenario_name = stacking_pred_only.scenario_name AND vbs_sbs.fold = stacking_pred_only.fold AND vbs_sbs.metric = stacking_pred_only.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7RandomForest_predictions_only_full' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_svm = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_pred_only.approach, vbs_sbs.metric, stacking_pred_only.result, ((stacking_pred_only.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_pred_only ON vbs_sbs.scenario_name = stacking_pred_only.scenario_name AND vbs_sbs.fold = stacking_pred_only.fold AND vbs_sbs.metric = stacking_pred_only.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7SVM_predictions_only_full' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")


    stacking_per_algorithm_regressor_cv = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_cross.approach, vbs_sbs.metric, stacking_cross.result, ((stacking_cross.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_cross ON vbs_sbs.scenario_name = stacking_cross.scenario_name AND vbs_sbs.fold = stacking_cross.fold AND vbs_sbs.metric = stacking_cross.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7per_algorithm_regressor_predictions_only_full_cv' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_sunny_cv = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_cross.approach, vbs_sbs.metric, stacking_cross.result, ((stacking_cross.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_cross ON vbs_sbs.scenario_name = stacking_cross.scenario_name AND vbs_sbs.fold = stacking_cross.fold AND vbs_sbs.metric = stacking_cross.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7SUNNY_predictions_only_full_cv' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_isac_cv = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_cross.approach, vbs_sbs.metric, stacking_cross.result, ((stacking_cross.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_cross ON vbs_sbs.scenario_name = stacking_cross.scenario_name AND vbs_sbs.fold = stacking_cross.fold AND vbs_sbs.metric = stacking_cross.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7ISAC_predictions_only_full_cv' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_satzilla_cv = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_cross.approach, vbs_sbs.metric, stacking_cross.result, ((stacking_cross.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_cross ON vbs_sbs.scenario_name = stacking_cross.scenario_name AND vbs_sbs.fold = stacking_cross.fold AND vbs_sbs.metric = stacking_cross.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7SATzilla-11_predictions_only_full_cv' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_expectation_cv = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_cross.approach, vbs_sbs.metric, stacking_cross.result, ((stacking_cross.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_cross ON vbs_sbs.scenario_name = stacking_cross.scenario_name AND vbs_sbs.fold = stacking_cross.fold AND vbs_sbs.metric = stacking_cross.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7Expectation_predictions_only_full_cv' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_par10_cv = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_cross.approach, vbs_sbs.metric, stacking_cross.result, ((stacking_cross.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_cross ON vbs_sbs.scenario_name = stacking_cross.scenario_name AND vbs_sbs.fold = stacking_cross.fold AND vbs_sbs.metric = stacking_cross.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7PAR10_predictions_only_full_cv' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_multiclass_cv = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_cross.approach, vbs_sbs.metric, stacking_cross.result, ((stacking_cross.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_cross ON vbs_sbs.scenario_name = stacking_cross.scenario_name AND vbs_sbs.fold = stacking_cross.fold AND vbs_sbs.metric = stacking_cross.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7multiclass_predictions_only_full_cv' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_random_forest_cv = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_cross.approach, vbs_sbs.metric, stacking_cross.result, ((stacking_cross.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_cross ON vbs_sbs.scenario_name = stacking_cross.scenario_name AND vbs_sbs.fold = stacking_cross.fold AND vbs_sbs.metric = stacking_cross.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7RandomForest_predictions_only_full_cv' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")
    stacking_svm_cv = get_dataframe_for_sql_query(
        "SELECT approach, AVG(n_par10) as result FROM (SELECT vbs_sbs.scenario_name, vbs_sbs.fold, stacking_cross.approach, vbs_sbs.metric, stacking_cross.result, ((stacking_cross.result - vbs_sbs.oracle_result)/(vbs_sbs.sbs_result -vbs_sbs.oracle_result)) as n_par10,vbs_sbs.oracle_result, vbs_sbs.sbs_result FROM (SELECT oracle_table.scenario_name, oracle_table.fold, oracle_table.metric, oracle_result, sbs_result FROM (SELECT scenario_name, fold, approach, metric, result as oracle_result FROM `vbs_sbs` WHERE approach='oracle') as oracle_table JOIN (SELECT scenario_name, fold, approach, metric, result as sbs_result FROM `vbs_sbs` WHERE approach='sbs') as sbs_table ON oracle_table.scenario_name = sbs_table.scenario_name AND oracle_table.fold=sbs_table.fold AND oracle_table.metric = sbs_table.metric) as vbs_sbs JOIN stacking_cross ON vbs_sbs.scenario_name = stacking_cross.scenario_name AND vbs_sbs.fold = stacking_cross.fold AND vbs_sbs.metric = stacking_cross.metric WHERE vbs_sbs.metric='par10') as final WHERE metric='par10' AND approach='stacking_1_2_3_4_5_6_7SVM_predictions_only_full_cv' AND NOT scenario_name='CSP-Minizinc-Obj-2016' GROUP BY approach")

    fig = plt.figure(1, figsize=(10, 7))

    ax = fig.add_subplot(111)

    width = 0.35  # the width of the bars
    ax.bar(0.8, stacking_per_algorithm_regressor.result, width, color=color1, zorder=6)
    ax.bar(1.8, stacking_sunny.result, width, color=color1, zorder=6)
    ax.bar(2.8, stacking_isac.result, width, color=color1, zorder=6)
    ax.bar(3.8, stacking_satzilla.result, width, color=color1, zorder=6)
    ax.bar(4.8, stacking_expectation.result, width, color=color1, zorder=6)
    ax.bar(5.8, stacking_par10.result, width, color=color1, zorder=6)
    ax.bar(6.8, stacking_multiclass.result, width, color=color1, zorder=6)
    ax.bar(7.8, stacking_random_forest.result, width, color=color1, zorder=6)
    ax.bar(8.8, stacking_svm.result, width, color=color1, zorder=6)

    ax.bar(1.2, stacking_per_algorithm_regressor_cv.result, width, color=color2, zorder=6)
    ax.bar(2.2, stacking_sunny_cv.result, width, color=color2, zorder=6)
    ax.bar(3.2, stacking_isac_cv.result, width, color=color2, zorder=6)
    ax.bar(4.2, stacking_satzilla_cv.result, width, color=color2, zorder=6)
    ax.bar(5.2, stacking_expectation_cv.result, width, color=color2, zorder=6)
    ax.bar(6.2, stacking_par10_cv.result, width, color=color2, zorder=6)
    ax.bar(7.2, stacking_multiclass_cv.result, width, color=color2, zorder=6)
    ax.bar(8.2, stacking_random_forest_cv.result, width, color=color2, zorder=6)
    ax.bar(9.2, stacking_svm_cv.result, width, color=color2, zorder=6)

    ax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9])
    ax.set_xticklabels(["PerAlgo", "SUNNY", "ISAC", "SATzilla", "SF-Exp.", "SF-PAR10", "Multi", "RFC", "SVM"])

    plt.xlabel("Meta-learner")
    plt.ylabel("nPAR10")

    ax.set_ylim(bottom=0)
    ax.set_ylim(top=1)

    plt.grid(b=True, which='major', linestyle='-', axis='y', zorder=0)

    l1 = mpatches.Patch(color=color1, label="Stacking")
    l2 = mpatches.Patch(color=color2, label="Stacking with cross-validation")

    fig.legend(handles=[l1, l2], loc=1, prop={'size': 13}, bbox_to_anchor=(0.99, 0.98))

    plt.show()

    fig.savefig("plotted/stacking_cross_predictions_only.pdf", bbox_inches='tight')


def get_dataframe_for_sql_query(sql_query: str):
    db_credentials = get_database_credential_string()
    return pd.read_sql(sql_query, con=db_credentials)


def get_database_credential_string():
    config = load_configuration()
    db_config_section = config['DATABASE']
    db_host = db_config_section['host']
    db_username = db_config_section['username']
    db_password = db_config_section['password']
    db_database = db_config_section['database']
    return "mysql://" + db_username + ":" + db_password + "@" + db_host + "/" + db_database


config = load_configuration()
generate_sbs_vbs_change_table()